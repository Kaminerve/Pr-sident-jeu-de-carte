import random


class Jeu:
    """
    set de jeu et déroulement du Président
    """

    print("\n /// Président /// \n")

    def __init__(self):
        """
        None --> None
        The constructor of Jeu
        """

        self.liste_carte = ["3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", 'K', 'A', "2", "joker"]
        self.jeu_de_carte = {"♥": ["3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", 'K', 'A', "2"],
                             "♦": ["3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", 'K', 'A', "2"],
                             "♠": ["3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", 'K', 'A', "2"],
                             "♣": ["3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", 'K', 'A', "2"],
                             "joker": ["rouge", "noir"]
                             }

        self.deck = []
        self.deck_joueurs = {}
        self.deck_joueurs_tri = {}

        self.ordre_joueurs = []

        self.nb_parties = 0
        self.titre = ["Président", "Vice président", "Vice trou du cul", "Trou du cul", "Citoyen"]
        self.joueurs_avec_titre = {}

        self.nb_joueurs = int(input("Veuiller entrer le nombre de joueurs qui veulent jouer : "))
        self.noms = {}
        if self.nb_parties == 0 :
            for i in range(self.nb_joueurs):
                prenom = input("Veuillez entrer votre nom de joueur : ")
                self.noms[f"joueur_{i}"] = prenom

        self.position = {}

        self.selectionner_cartes = 0
        self.exemplaires_cartes = 0
        self.cartes = []
        self.manche = []

        self.fin_manche = False

    def distribution(self):
        """
        Method that split the deck of each player, randomly
        """
        reste = []

        for k in self.jeu_de_carte:
            for v in self.jeu_de_carte[k]:
                if k == "joker":
                    self.deck.append(f"{k} {v}")
                else:
                    self.deck.append(f"{v} de {k}")

        random.shuffle(self.deck)

        for i in range(self.nb_joueurs):
            self.deck_joueurs[f"joueur_{i + 1}"] = []
        while len(self.deck) != 0 :
            for k in self.deck_joueurs :
                self.deck_joueurs[k].append(self.deck[-1])
                self.deck.pop()
                if len(self.deck) == 0 :
                    break

    def tri(self):
        """
        Method that sorted the deck of each player
        """
        for i in range(self.nb_joueurs):
            self.deck_joueurs_tri[f"joueur_{i + 1}"] = []
        for k in self.deck_joueurs:
            for i in self.liste_carte:
                for j in self.deck_joueurs[k]:
                    if i in j:
                        self.deck_joueurs_tri[k].append(j)

    def ordre(self):
        """
        Method that verify who have the heart queen
        """
        temp = []
        if self.nb_parties == 0:
            for k in self.deck_joueurs_tri:
                if "Q de ♥" in self.deck_joueurs_tri[k]:
                    self.ordre_joueurs.append(k)
                elif "Q de ♥" not in self.deck_joueurs_tri[k]:
                    temp.append(k)

        if self.nb_parties > 0:
            for k in self.joueurs_avec_titre:
                if self.joueurs_avec_titre[k] == "Trou du cul":
                    self.ordre_joueurs = [k]
                elif not (self.joueurs_avec_titre[k] == "Trou du cul"):
                    temp.append(k)

        random.shuffle(temp)

        for i in temp:
            self.ordre_joueurs.append(i)

    def affichage(self):
        """
        Method that show what happen during the game
        """
        compteur = self.nb_joueurs
        for i in range(self.nb_joueurs):
            self.position[f"joueur_{i + 1}"] = 1
        for i in self.deck_joueurs_tri:
            print(f"\n{self.noms[i]} a :\n")
            compteur -= 1
            for k in self.deck_joueurs_tri[i]:
                print(f"- {k} ({self.noms[self.position[i]]})")
                self.position[i] += 1

        print("\n \nL'ordre de chaque tour sera le suivant :")
        for i in range(1, len(self.ordre_joueurs) + 1):
            print(f"({i}) {self.noms[self.ordre_joueurs[i - 1]]}")

    def show_ordre(self):
        """
        :return: self.ordre_joueurs
        """
        return self.ordre_joueurs

    def utiliser_carte(self, joueur, carte = None):
        """
        Process that show what card the player played
        :param joueur: str
        :return: None
        """
        self.cartes = []
        if len(self.manche) == 0 :
            self.exemplaires_cartes = int(input("Veuillez entrer le nombre d'exemplaires de cartes à jouer cette manche : "))
        if carte == None :
            self.selectionner_cartes = input(f"Entrer la carte à {self.exemplaires_cartes} exemplaires que vous voulez jouer : ")

            jsuis_tilte = []
            for nb in self.deck_joueurs_tri[joueur] :
                jsuis_tilte.append(nb[0])
                if jsuis_tilte.count(self.selectionner_cartes) >= self.exemplaires_cartes :
                    for v in self.deck_joueurs_tri[joueur] :
                        if self.selectionner_cartes in v :
                            self.cartes.append(v)
                            self.manche.append(v)
                            self.deck_joueurs_tri[joueur].remove(v)
            print(f"{joueur} a mis {self.cartes} ! ")

            

    def affichage_cartes(self) :
        """
        Process that show the set of each player after deleting the using ones
        :return: None
        """
        compteur = self.nb_joueurs
        for i in range(self.nb_joueurs):
            self.position[f"joueur_{i + 1}"] = 1
        for i in self.deck_joueurs_tri:
            print(f"\n{self.noms[i]} a :\n")
            compteur -= 1
            for k in self.deck_joueurs_tri[i]:
                print(f"- {k} ({self.noms[self.position[i]]})")
                self.position[i] += 1

    def verif_fin_manche(self):
        """
        Function that verify if this is the hand of the turn
        :return: Bool
        """
        if self.cartes[-1][0] == "8" :
            self.fin_manche = True
        if self.cartes[-1][0] == "2" :
            conteste = str(input("Qui veut contester avec son joker ? (o/n)")
            if conteste == "o" :
                blaze = str(input("Quel joueur êtes_vous ? "))
                for k in self.noms :
                    if self.noms[k] == blaze :
                        for i in self.deck_joueurs_tri[k] :
                            if "j" in i :
                                self.utiliser_carte(k)
                                conteste = input("Qui veut contester avec son 3 de ♣ ? (o/n)")
                                if conteste == "o" :
                                    blaze = str(input("Quel joueur êtes_vous ? "))
                                                    for k in self.noms :
                                                        if self.noms[k] == blaze :
                                                            for i in self.deck_joueurs_tri[k] :
                                                                if "j" in i :
                                                                    self.utiliser_carte(k)
jeu = Jeu()
jeu.distribution()
jeu.tri()
jeu.ordre()
jeu.affichage()
running = True
while running :
    for i in jeu.show_ordre():
        print(f"Au tour de {i} !")
        jeu.utiliser_carte(i)
        jeu.affichage_cartes()
